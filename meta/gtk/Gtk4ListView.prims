


primitive Gtk4ListView
"""
`GtkListView` presents a large dynamic list of items.

`GtkListView` uses its factory to generate one row widget for each visible
item and shows them in a linear display, either vertically or horizontally.

The [property@Gtk.ListView:show-separators] property offers a simple way to
display separators between the rows.

`GtkListView` allows the user to select items according to the selection
characteristics of the model. For models that allow multiple selected items,
it is possible to turn on _rubberband selection_, using
[property@Gtk.ListView:enable-rubberband].

If you need multiple columns with headers, see [class@Gtk.ColumnView].

To learn more about the list widget framework, see the
[overview](section-list-widget.html).

An example of using `GtkListView`:
```c
static void
setup_listitem_cb (GtkListItemFactory *factory,
                   GtkListItem        *list_item)
{
  GtkWidget *image;

  image = gtk_image_new ();
  gtk_image_set_icon_size (GTK_IMAGE (image), GTK_ICON_SIZE_LARGE);
  gtk_list_item_set_child (list_item, image);
}

static void
bind_listitem_cb (GtkListItemFactory *factory,
                  GtkListItem        *list_item)
{
  GtkWidget *image;
  GAppInfo *app_info;

  image = gtk_list_item_get_child (list_item);
  app_info = gtk_list_item_get_item (list_item);
  gtk_image_set_from_gicon (GTK_IMAGE (image), g_app_info_get_icon (app_info));
}

static void
activate_cb (GtkListView  *list,
             guint         position,
             gpointer      unused)
{
  GAppInfo *app_info;

  app_info = g_list_model_get_item (G_LIST_MODEL (gtk_list_view_get_model (list)), position);
  g_app_info_launch (app_info, NULL, NULL, NULL);
  g_object_unref (app_info);
}

...

  model = create_application_list ();

  factory = gtk_signal_list_item_factory_new ();
  g_signal_connect (factory, "setup", G_CALLBACK (setup_listitem_cb), NULL);
  g_signal_connect (factory, "bind", G_CALLBACK (bind_listitem_cb), NULL);

  list = gtk_list_view_new (GTK_SELECTION_MODEL (gtk_single_selection_new (model)), factory);

  g_signal_connect (list, "activate", G_CALLBACK (activate_cb), NULL);

  gtk_scrolled_window_set_child (GTK_SCROLLED_WINDOW (sw), list);
```

# CSS nodes

```
listview[.separators][.rich-list][.navigation-sidebar][.data-table]
├── row[.activatable]
│
├── row[.activatable]
│
┊
╰── [rubberband]
```

`GtkListView` uses a single CSS node named `listview`. It may carry the
`.separators` style class, when [property@Gtk.ListView:show-separators]
property is set. Each child widget uses a single CSS node named `row`.
If the [property@Gtk.ListItem:activatable] property is set, the
corresponding row will have the `.activatable` style class. For
rubberband selection, a node with name `rubberband` is used.

The main listview node may also carry style classes to select
the style of [list presentation](ListContainers.html#list-styles):
.rich-list, .navigation-sidebar or .data-table.

# Accessibility

`GtkListView` uses the %GTK_ACCESSIBLE_ROLE_LIST role, and the list
items use the %GTK_ACCESSIBLE_ROLE_LIST_ITEM role.Creates a new `GtkListView` that uses the given @factory for
mapping items to widgets.

The function takes ownership of the
arguments, so you can write code like
```c
list_view = gtk_list_view_new (create_model (),
  gtk_builder_list_item_factory_new_from_resource ("/resource.ui"));
```a new `GtkListView` using the given @model and @factorythe model to useThe factory to populate items withReturns whether rows can be selected by dragging with the mouse.%TRUE if rubberband selection is enableda `GtkListView`Gets the factory that's currently used to populate list items.The factory in usea `GtkListView`Gets the model that's currently used to read the items displayed.The model in usea `GtkListView`Returns whether the list box should show separators
between rows.%TRUE if the list box shows separatorsa `GtkListView`Returns whether rows will be activated on single click and
selected on hover.%TRUE if rows are activated on single clicka `GtkListView`Sets whether selections can be changed by dragging with the mouse.a `GtkListView`%TRUE to enable rubberband selectionSets the `GtkListItemFactory` to use for populating list items.a `GtkListView`the factory to useSets the model to use.

This must be a [iface@Gtk.SelectionModel] to use.a `GtkListView`the model to useSets whether the list box should show separators
between rows.a `GtkListView`%TRUE to show separatorsSets whether rows should be activated on single click and
selected on hover.a `GtkListView`%TRUE to activate items on single clickAllow rubberband selection.Factory for populating list items.Model for the items displayed.Show separators between rows.Activate rows on single click and select them on hover.Emitted when a row has been activated by the user,
usually via activating the GtkListView|list.activate-item action.

This allows for a convenient way to handle activation in a listview.
See [method@Gtk.ListItem.set_activatable] for details on how to use
this signal.position of item to activate
"""
  fun gnew(model: NullablePointer[SGtkSelectionModel] tag, factory: NullablePointer[SGtkListItemFactory] tag): NullablePointer[SGtkWidget] =>
"""
Creates a new `GtkListView` that uses the given @factory for
mapping items to widgets.

The function takes ownership of the
arguments, so you can write code like
```c
list_view = gtk_list_view_new (create_model (),
  gtk_builder_list_item_factory_new_from_resource ("/resource.ui"));
```a new `GtkListView` using the given @model and @factorythe model to useThe factory to populate items with
"""

    @printf("gtk_list_view_new(model: NullablePointer[SGtkSelectionModel] tag, factory: NullablePointer[SGtkListItemFactory] tag)\n".cstring())
    @gtk_list_view_new(model, factory)
  fun get_model(self: NullablePointer[SGtkListView] tag): NullablePointer[SGtkSelectionModel] =>
"""
Gets the model that's currently used to read the items displayed.The model in usea `GtkListView`
"""

    @printf("gtk_list_view_get_model(self: NullablePointer[SGtkListView] tag)\n".cstring())
    @gtk_list_view_get_model(self)
  fun set_model(self: NullablePointer[SGtkListView] tag, model: NullablePointer[SGtkSelectionModel] tag): None =>
"""
Sets the model to use.

This must be a [iface@Gtk.SelectionModel] to use.a `GtkListView`the model to use
"""

    @printf("gtk_list_view_set_model(self: NullablePointer[SGtkListView] tag, model: NullablePointer[SGtkSelectionModel] tag)\n".cstring())
    @gtk_list_view_set_model(self, model)
  fun set_factory(self: NullablePointer[SGtkListView] tag, factory: NullablePointer[SGtkListItemFactory] tag): None =>
"""
Sets the `GtkListItemFactory` to use for populating list items.a `GtkListView`the factory to use
"""

    @printf("gtk_list_view_set_factory(self: NullablePointer[SGtkListView] tag, factory: NullablePointer[SGtkListItemFactory] tag)\n".cstring())
    @gtk_list_view_set_factory(self, factory)
  fun get_factory(self: NullablePointer[SGtkListView] tag): NullablePointer[SGtkListItemFactory] =>
"""
Gets the factory that's currently used to populate list items.The factory in usea `GtkListView`
"""

    @printf("gtk_list_view_get_factory(self: NullablePointer[SGtkListView] tag)\n".cstring())
    @gtk_list_view_get_factory(self)
  fun set_show_separators(self: NullablePointer[SGtkListView] tag, showseparators: I32): None =>
"""
Sets whether the list box should show separators
between rows.a `GtkListView`%TRUE to show separators
"""

    @printf("gtk_list_view_set_show_separators(self: NullablePointer[SGtkListView] tag, showseparators: I32)\n".cstring())
    @gtk_list_view_set_show_separators(self, showseparators)
  fun get_show_separators(self: NullablePointer[SGtkListView] tag): I32 =>
"""
Returns whether the list box should show separators
between rows.%TRUE if the list box shows separatorsa `GtkListView`
"""

    @printf("gtk_list_view_get_show_separators(self: NullablePointer[SGtkListView] tag)\n".cstring())
    @gtk_list_view_get_show_separators(self)
  fun set_single_click_activate(self: NullablePointer[SGtkListView] tag, singleclickactivate: I32): None =>
"""
Sets whether rows should be activated on single click and
selected on hover.a `GtkListView`%TRUE to activate items on single click
"""

    @printf("gtk_list_view_set_single_click_activate(self: NullablePointer[SGtkListView] tag, singleclickactivate: I32)\n".cstring())
    @gtk_list_view_set_single_click_activate(self, singleclickactivate)
  fun get_single_click_activate(self: NullablePointer[SGtkListView] tag): I32 =>
"""
Returns whether rows will be activated on single click and
selected on hover.%TRUE if rows are activated on single clicka `GtkListView`
"""

    @printf("gtk_list_view_get_single_click_activate(self: NullablePointer[SGtkListView] tag)\n".cstring())
    @gtk_list_view_get_single_click_activate(self)
  fun set_enable_rubberband(self: NullablePointer[SGtkListView] tag, enablerubberband: I32): None =>
"""
Sets whether selections can be changed by dragging with the mouse.a `GtkListView`%TRUE to enable rubberband selection
"""

    @printf("gtk_list_view_set_enable_rubberband(self: NullablePointer[SGtkListView] tag, enablerubberband: I32)\n".cstring())
    @gtk_list_view_set_enable_rubberband(self, enablerubberband)
  fun get_enable_rubberband(self: NullablePointer[SGtkListView] tag): I32 =>
"""
Returns whether rows can be selected by dragging with the mouse.%TRUE if rubberband selection is enableda `GtkListView`
"""

    @printf("gtk_list_view_get_enable_rubberband(self: NullablePointer[SGtkListView] tag)\n".cstring())
    @gtk_list_view_get_enable_rubberband(self)
