


primitive Gtk4TextView
"""
A widget that displays the contents of a [class@Gtk.TextBuffer].

![An example GtkTextview](multiline-text.png)

You may wish to begin by reading the [conceptual overview](section-text-widget.html),
which gives an overview of all the objects and data types related to the
text widget and how they work together.

## CSS nodes

```
textview.view
├── border.top
├── border.left
├── text
│   ╰── [selection]
├── border.right
├── border.bottom
╰── [window.popup]
```

`GtkTextView` has a main css node with name textview and style class .view,
and subnodes for each of the border windows, and the main text area,
with names border and text, respectively. The border nodes each get
one of the style classes .left, .right, .top or .bottom.

A node representing the selection will appear below the text node.

If a context menu is opened, the window node will appear as a subnode
of the main node.

## Accessibility

`GtkTextView` uses the %GTK_ACCESSIBLE_ROLE_TEXT_BOX role.Creates a new `GtkTextView`.

If you don’t call [method@Gtk.TextView.set_buffer] before using the
text view, an empty default buffer will be created for you. Get the
buffer with [method@Gtk.TextView.get_buffer]. If you want to specify
your own buffer, consider [ctor@Gtk.TextView.new_with_buffer].a new `GtkTextView`Creates a new `GtkTextView` widget displaying the buffer @buffer.

One buffer can be shared among many widgets. @buffer may be %NULL
to create a default buffer, in which case this function is equivalent
to [ctor@Gtk.TextView.new]. The text view adds its own reference count
to the buffer; it does not take over an existing reference.a new `GtkTextView`.a `GtkTextBuffer`Adds a child widget in the text buffer, at the given @anchor.a `GtkTextView`a `GtkWidget`a `GtkTextChildAnchor` in the `GtkTextBuffer` for @text_viewAdds @child at a fixed coordinate in the `GtkTextView`'s text window.

The @xpos and @ypos must be in buffer coordinates (see
[method@Gtk.TextView.get_iter_location] to convert to
buffer coordinates).

@child will scroll with the text view.

If instead you want a widget that will not move with the
`GtkTextView` contents see `GtkOverlay`.a `GtkTextView`a `GtkWidget`X position of child in window coordinatesY position of child in window coordinatesMoves the given @iter backward by one display (wrapped) line.

A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view’s width; paragraphs are the same in all
views, since they depend on the contents of the `GtkTextBuffer`.%TRUE if @iter was moved and is not on the end iteratora `GtkTextView`a `GtkTextIter`Moves the given @iter backward to the next display line start.

A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view’s width; paragraphs are the same in all
views, since they depend on the contents of the `GtkTextBuffer`.%TRUE if @iter was moved and is not on the end iteratora `GtkTextView`a `GtkTextIter`Converts buffer coordinates to window coordinates.a `GtkTextView`a `GtkTextWindowType`buffer x coordinatebuffer y coordinatewindow x coordinate return locationwindow y coordinate return locationMoves the given @iter forward by one display (wrapped) line.

A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view’s width; paragraphs are the same in all
views, since they depend on the contents of the `GtkTextBuffer`.%TRUE if @iter was moved and is not on the end iteratora `GtkTextView`a `GtkTextIter`Moves the given @iter forward to the next display line end.

A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view’s width; paragraphs are the same in all
views, since they depend on the contents of the `GtkTextBuffer`.%TRUE if @iter was moved and is not on the end iteratora `GtkTextView`a `GtkTextIter`Returns whether pressing the <kbd>Tab</kbd> key inserts a tab characters.

See [method@Gtk.TextView.set_accepts_tab].%TRUE if pressing the Tab key inserts a tab character,
  %FALSE if pressing the Tab key moves the keyboard focus.A `GtkTextView`Gets the bottom margin for text in the @text_view.bottom margin in pixelsa `GtkTextView`Returns the `GtkTextBuffer` being displayed by this text view.

The reference count on the buffer is not incremented; the caller
of this function won’t own a new reference.a `GtkTextBuffer`a `GtkTextView`Determine the positions of the strong and weak cursors if the
insertion point is at @iter.

The position of each cursor is stored as a zero-width rectangle.
The strong cursor location is the location where characters of
the directionality equal to the base direction of the paragraph
are inserted. The weak cursor location is the location where
characters of the directionality opposite to the base direction
of the paragraph are inserted.

If @iter is %NULL, the actual cursor position is used.

Note that if @iter happens to be the actual cursor position, and
there is currently an IM preedit sequence being entered, the
returned locations will be adjusted to account for the preedit
cursor’s offset within the preedit sequence.

The rectangle position is in buffer coordinates; use
[method@Gtk.TextView.buffer_to_window_coords] to convert these
coordinates to coordinates for one of the windows in the text view.a `GtkTextView`a `GtkTextIter`location to store the strong cursor positionlocation to store the weak cursor positionFind out whether the cursor should be displayed.whether the insertion mark is visiblea `GtkTextView`Returns the default editability of the `GtkTextView`.

Tags in the buffer may override this setting for some ranges of text.whether text is editable by defaulta `GtkTextView`Gets the menu model that gets added to the context menu
or %NULL if none has been set.the menu modela `GtkTextView`Gets a `GtkWidget` that has previously been set as gutter.

See [method@Gtk.TextView.set_gutter].

@win must be one of %GTK_TEXT_WINDOW_LEFT, %GTK_TEXT_WINDOW_RIGHT,
%GTK_TEXT_WINDOW_TOP, or %GTK_TEXT_WINDOW_BOTTOM.a `GtkWidget`a `GtkTextView`a `GtkTextWindowType`Gets the default indentation of paragraphs in @text_view.

Tags in the view’s buffer may override the default.
The indentation may be negative.number of pixels of indentationa `GtkTextView`Gets the `input-hints` of the `GtkTextView`.a `GtkTextView`Gets the `input-purpose` of the `GtkTextView`.a `GtkTextView`Retrieves the iterator at buffer coordinates @x and @y.

Buffer coordinates are coordinates for the entire buffer, not just
the currently-displayed portion. If you have coordinates from an
event, you have to convert those to buffer coordinates with
[method@Gtk.TextView.window_to_buffer_coords].%TRUE if the position is over texta `GtkTextView`a `GtkTextIter`x position, in buffer coordinatesy position, in buffer coordinatesRetrieves the iterator pointing to the character at buffer
coordinates @x and @y.

Buffer coordinates are coordinates for the entire buffer, not just
the currently-displayed portion. If you have coordinates from an event,
you have to convert those to buffer coordinates with
[method@Gtk.TextView.window_to_buffer_coords].

Note that this is different from [method@Gtk.TextView.get_iter_at_location],
which returns cursor locations, i.e. positions between characters.%TRUE if the position is over texta `GtkTextView`a `GtkTextIter`if non-%NULL, location to store
   an integer indicating where in the grapheme the user clicked.
   It will either be zero, or the number of characters in the grapheme.
   0 represents the trailing edge of the grapheme.x position, in buffer coordinatesy position, in buffer coordinatesGets a rectangle which roughly contains the character at @iter.

The rectangle position is in buffer coordinates; use
[method@Gtk.TextView.buffer_to_window_coords] to convert these
coordinates to coordinates for one of the windows in the text view.a `GtkTextView`a `GtkTextIter`bounds of the character at @iterGets the default justification of paragraphs in @text_view.

Tags in the buffer may override the default.default justificationa `GtkTextView`Gets the default left margin size of paragraphs in the @text_view.

Tags in the buffer may override the default.left margin in pixelsa `GtkTextView`Gets the `GtkTextIter` at the start of the line containing
the coordinate @y.

@y is in buffer coordinates, convert from window coordinates with
[method@Gtk.TextView.window_to_buffer_coords]. If non-%NULL,
@line_top will be filled with the coordinate of the top edge
of the line.a `GtkTextView`a `GtkTextIter`a y coordinatereturn location for top coordinate of the lineGets the y coordinate of the top of the line containing @iter,
and the height of the line.

The coordinate is a buffer coordinate; convert to window
coordinates with [method@Gtk.TextView.buffer_to_window_coords].a `GtkTextView`a `GtkTextIter`return location for a y coordinatereturn location for a heightGets the `PangoContext` that is used for rendering LTR directed
text layouts.

The context may be replaced when CSS changes occur.a `PangoContext`a `GtkTextView`Gets whether the `GtkTextView` uses monospace styling.%TRUE if monospace fonts are desireda `GtkTextView`Returns whether the `GtkTextView` is in overwrite mode or not.whether @text_view is in overwrite mode or not.a `GtkTextView`Gets the default number of pixels to put above paragraphs.

Adding this function with [method@Gtk.TextView.get_pixels_below_lines]
is equal to the line space between each paragraph.default number of pixels above paragraphsa `GtkTextView`Gets the default number of pixels to put below paragraphs.

The line space is the sum of the value returned by this function and
the value returned by [method@Gtk.TextView.get_pixels_above_lines].default number of blank pixels below paragraphsa `GtkTextView`Gets the default number of pixels to put between wrapped lines
inside a paragraph.default number of pixels of blank space between wrapped linesa `GtkTextView`Gets the default right margin for text in @text_view.

Tags in the buffer may override the default.right margin in pixelsa `GtkTextView`Gets the `PangoContext` that is used for rendering RTL directed
text layouts.

The context may be replaced when CSS changes occur.a `PangoContext`a `GtkTextView`Gets the default tabs for @text_view.

Tags in the buffer may override the defaults. The returned array
will be %NULL if “standard” (8-space) tabs are used. Free the
return value with [method@Pango.TabArray.free].copy of default tab array,
  or %NULL if standard tabs are used; must be freed with
  [method@Pango.TabArray.free].a `GtkTextView`Gets the top margin for text in the @text_view.top margin in pixelsa `GtkTextView`Fills @visible_rect with the currently-visible
region of the buffer, in buffer coordinates.

Convert to window coordinates with
[method@Gtk.TextView.buffer_to_window_coords].a `GtkTextView`rectangle to fillGets the line wrapping for the view.the line wrap settinga `GtkTextView`Allow the `GtkTextView` input method to internally handle key press
and release events.

If this function returns %TRUE, then no further processing should be
done for this key event. See [method@Gtk.IMContext.filter_keypress].

Note that you are expected to call this function from your handler
when overriding key event handling. This is needed in the case when
you need to insert your own key handling between the input method
and the default key event handling of the `GtkTextView`.

```c
static gboolean
gtk_foo_bar_key_press_event (GtkWidget *widget,
                             GdkEvent  *event)
{
  guint keyval;

  gdk_event_get_keyval ((GdkEvent*)event, &keyval);

  if (keyval == GDK_KEY_Return || keyval == GDK_KEY_KP_Enter)
    {
      if (gtk_text_view_im_context_filter_keypress (GTK_TEXT_VIEW (widget), event))
        return TRUE;
    }

  // Do some stuff

  return GTK_WIDGET_CLASS (gtk_foo_bar_parent_class)->key_press_event (widget, event);
}
```%TRUE if the input method handled the key event.a `GtkTextView`the key eventMoves a mark within the buffer so that it's
located within the currently-visible text area.%TRUE if the mark moved (wasn’t already onscreen)a `GtkTextView`a `GtkTextMark`Updates the position of a child.

See [method@Gtk.TextView.add_overlay].a `GtkTextView`a widget already added with [method@Gtk.TextView.add_overlay]new X position in buffer coordinatesnew Y position in buffer coordinatesMove the iterator a given number of characters visually, treating
it as the strong cursor position.

If @count is positive, then the new strong cursor position will
be @count positions to the right of the old cursor position.
If @count is negative then the new strong cursor position will
be @count positions to the left of the old cursor position.

In the presence of bi-directional text, the correspondence
between logical and visual order will depend on the direction
of the current run, and there may be jumps when the cursor
is moved off of the end of a run.%TRUE if @iter moved and is not on the end iteratora `GtkTextView`a `GtkTextIter`number of characters to move (negative moves left,
   positive moves right)Moves the cursor to the currently visible region of the
buffer.%TRUE if the cursor had to be moved.a `GtkTextView`Removes a child widget from @text_view.a `GtkTextView`the child to removeEnsures that the cursor is shown.

This also resets the time that it will stay blinking (or
visible, in case blinking is disabled).

This function should be called in response to user input
(e.g. from derived classes that override the textview's
event handlers).a `GtkTextView`Reset the input method context of the text view if needed.

This can be necessary in the case where modifying the buffer
would confuse on-going input method behavior.a `GtkTextView`Scrolls @text_view the minimum distance such that @mark is contained
within the visible area of the widget.a `GtkTextView`a mark in the buffer for @text_viewScrolls @text_view so that @iter is on the screen in the position
indicated by @xalign and @yalign.

An alignment of 0.0 indicates left or top, 1.0 indicates right or
bottom, 0.5 means center. If @use_align is %FALSE, the text scrolls
the minimal distance to get the mark onscreen, possibly not scrolling
at all. The effective screen for purposes of this function is reduced
by a margin of size @within_margin.

Note that this function uses the currently-computed height of the
lines in the text buffer. Line heights are computed in an idle
handler; so this function may not have the desired effect if it’s
called before the height computations. To avoid oddness, consider
using [method@Gtk.TextView.scroll_to_mark] which saves a point to be
scrolled to after line validation.%TRUE if scrolling occurreda `GtkTextView`a `GtkTextIter`margin as a [0.0,0.5) fraction of screen sizewhether to use alignment arguments (if %FALSE,
   just get the mark onscreen)horizontal alignment of mark within visible areavertical alignment of mark within visible areaScrolls @text_view so that @mark is on the screen in the position
indicated by @xalign and @yalign.

An alignment of 0.0 indicates left or top, 1.0 indicates right or
bottom, 0.5 means center. If @use_align is %FALSE, the text scrolls
the minimal distance to get the mark onscreen, possibly not scrolling
at all. The effective screen for purposes of this function is reduced
by a margin of size @within_margin.a `GtkTextView`a `GtkTextMark`margin as a [0.0,0.5) fraction of screen sizewhether to use alignment arguments (if %FALSE, just
   get the mark onscreen)horizontal alignment of mark within visible areavertical alignment of mark within visible areaSets the behavior of the text widget when the <kbd>Tab</kbd> key is pressed.

If @accepts_tab is %TRUE, a tab character is inserted. If @accepts_tab
is %FALSE the keyboard focus is moved to the next widget in the focus
chain.A `GtkTextView`%TRUE if pressing the Tab key should insert a tab
   character, %FALSE, if pressing the Tab key should move the
   keyboard focus.Sets the bottom margin for text in @text_view.

Note that this function is confusingly named.
In CSS terms, the value set here is padding.a `GtkTextView`bottom margin in pixelsSets @buffer as the buffer being displayed by @text_view.

The previous buffer displayed by the text view is unreferenced, and
a reference is added to @buffer. If you owned a reference to @buffer
before passing it to this function, you must remove that reference
yourself; `GtkTextView` will not “adopt” it.a `GtkTextView`a `GtkTextBuffer`Toggles whether the insertion point should be displayed.

A buffer with no editable text probably shouldn’t have a visible
cursor, so you may want to turn the cursor off.

Note that this property may be overridden by the
[property@GtkSettings:gtk-keynav-use-caret] setting.a `GtkTextView`whether to show the insertion cursorSets the default editability of the `GtkTextView`.

You can override this default setting with tags in the buffer,
using the “editable” attribute of tags.a `GtkTextView`whether it’s editableSets a menu model to add when constructing the context
menu for @text_view.

You can pass %NULL to remove a previously set extra menu.a `GtkTextView`a `GMenuModel`Places @widget into the gutter specified by @win.

@win must be one of %GTK_TEXT_WINDOW_LEFT, %GTK_TEXT_WINDOW_RIGHT,
%GTK_TEXT_WINDOW_TOP, or %GTK_TEXT_WINDOW_BOTTOM.a `GtkTextView`a `GtkTextWindowType`a `GtkWidget`Sets the default indentation for paragraphs in @text_view.

Tags in the buffer may override the default.a `GtkTextView`indentation in pixelsSets the `input-hints` of the `GtkTextView`.

The `input-hints` allow input methods to fine-tune
their behaviour.a `GtkTextView`the hintsSets the `input-purpose` of the `GtkTextView`.

The `input-purpose` can be used by on-screen keyboards
and other input methods to adjust their behaviour.a `GtkTextView`the purposeSets the default justification of text in @text_view.

Tags in the view’s buffer may override the default.a `GtkTextView`justificationSets the default left margin for text in @text_view.

Tags in the buffer may override the default.

Note that this function is confusingly named.
In CSS terms, the value set here is padding.a `GtkTextView`left margin in pixelsSets whether the `GtkTextView` should display text in
monospace styling.a `GtkTextView`%TRUE to request monospace stylingChanges the `GtkTextView` overwrite mode.a `GtkTextView`%TRUE to turn on overwrite mode, %FALSE to turn it offSets the default number of blank pixels above paragraphs in @text_view.

Tags in the buffer for @text_view may override the defaults.a `GtkTextView`pixels above paragraphsSets the default number of pixels of blank space
to put below paragraphs in @text_view.

May be overridden by tags applied to @text_view’s buffer.a `GtkTextView`pixels below paragraphsSets the default number of pixels of blank space to leave between
display/wrapped lines within a paragraph.

May be overridden by tags in @text_view’s buffer.a `GtkTextView`default number of pixels between wrapped linesSets the default right margin for text in the text view.

Tags in the buffer may override the default.

Note that this function is confusingly named.
In CSS terms, the value set here is padding.a `GtkTextView`right margin in pixelsSets the default tab stops for paragraphs in @text_view.

Tags in the buffer may override the default.a `GtkTextView`tabs as a `PangoTabArray`Sets the top margin for text in @text_view.

Note that this function is confusingly named.
In CSS terms, the value set here is padding.a `GtkTextView`top margin in pixelsSets the line wrapping for the view.a `GtkTextView`a `GtkWrapMode`Determines whether @iter is at the start of a display line.

See [method@Gtk.TextView.forward_display_line] for an
explanation of display lines vs. paragraphs.%TRUE if @iter begins a wrapped linea `GtkTextView`a `GtkTextIter`Converts coordinates on the window identified by @win to buffer
coordinates.a `GtkTextView`a `GtkTextWindowType`window x coordinatewindow y coordinatebuffer x coordinate return locationbuffer y coordinate return locationWhether Tab will result in a tab character being entered.The bottom margin for text in the text view.

Note that this property is confusingly named. In CSS terms,
the value set here is padding, and it is applied in addition
to the padding from the theme.

Don't confuse this property with [property@Gtk.Widget:margin-bottom].The buffer which is displayed.If the insertion cursor is shown.A menu model whose contents will be appended to the context menu.Which IM (input method) module should be used for this text_view.

See [class@Gtk.IMContext].

Setting this to a non-%NULL value overrides the system-wide IM module
setting. See the GtkSettings [property@Gtk.Settings:gtk-im-module] property.Amount to indent the paragraph, in pixels.Additional hints (beyond [property@Gtk.TextView:input-purpose])
that allow input methods to fine-tune their behaviour.The purpose of this text field.

This property can be used by on-screen keyboards and other input
methods to adjust their behaviour.The default left margin for text in the text view.

Tags in the buffer may override the default.

Note that this property is confusingly named. In CSS terms,
the value set here is padding, and it is applied in addition
to the padding from the theme.Whether text should be displayed in a monospace font.

If %TRUE, set the .monospace style class on the
text view to indicate that a monospace font is desired.Whether entered text overwrites existing contents.The default right margin for text in the text view.

Tags in the buffer may override the default.

Note that this property is confusingly named. In CSS terms,
the value set here is padding, and it is applied in addition
to the padding from the theme.The top margin for text in the text view.

Note that this property is confusingly named. In CSS terms,
the value set here is padding, and it is applied in addition
to the padding from the theme.

Don't confuse this property with [property@Gtk.Widget:margin-top].Gets emitted when the user asks for it.

The ::backspace signal is a [keybinding signal](class.SignalAction.html).

The default bindings for this signal are
<kbd>Backspace</kbd> and <kbd>Shift</kbd>-<kbd>Backspace</kbd>.Gets emitted to copy the selection to the clipboard.

The ::copy-clipboard signal is a [keybinding signal](class.SignalAction.html).

The default bindings for this signal are
<kbd>Ctrl</kbd>-<kbd>c</kbd> and
<kbd>Ctrl</kbd>-<kbd>Insert</kbd>.Gets emitted to cut the selection to the clipboard.

The ::cut-clipboard signal is a [keybinding signal](class.SignalAction.html).

The default bindings for this signal are
<kbd>Ctrl</kbd>-<kbd>x</kbd> and
<kbd>Shift</kbd>-<kbd>Delete</kbd>.Gets emitted when the user initiates a text deletion.

The ::delete-from-cursor signal is a [keybinding signal](class.SignalAction.html).

If the @type is %GTK_DELETE_CHARS, GTK deletes the selection
if there is one, otherwise it deletes the requested number
of characters.

The default bindings for this signal are <kbd>Delete</kbd> for
deleting a character, <kbd>Ctrl</kbd>-<kbd>Delete</kbd> for
deleting a word and <kbd>Ctrl</kbd>-<kbd>Backspace</kbd> for
deleting a word backwards.the granularity of the deletion, as a `GtkDeleteType`the number of @type units to deleteEmitted when the selection needs to be extended at @location.%GDK_EVENT_STOP to stop other handlers from being invoked for the
  event. %GDK_EVENT_PROPAGATE to propagate the event further.the granularity typethe location where to extend the selectionwhere the selection should startwhere the selection should endGets emitted when the user initiates the insertion of a
fixed string at the cursor.

The ::insert-at-cursor signal is a [keybinding signal](class.SignalAction.html).

This signal has no default bindings.the string to insertGets emitted to present the Emoji chooser for the @text_view.

The ::insert-emoji signal is a [keybinding signal](class.SignalAction.html).

The default bindings for this signal are
<kbd>Ctrl</kbd>-<kbd>.</kbd> and
<kbd>Ctrl</kbd>-<kbd>;</kbd>Gets emitted when the user initiates a cursor movement.

The ::move-cursor signal is a [keybinding signal](class.SignalAction.html).
If the cursor is not visible in @text_view, this signal causes
the viewport to be moved instead.

Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control the cursor
programmatically.


The default bindings for this signal come in two variants,
the variant with the <kbd>Shift</kbd> modifier extends the
selection, the variant without it does not.
There are too many key combinations to list them all here.

- <kbd>←</kbd>, <kbd>→</kbd>, <kbd>↑</kbd>, <kbd>↓</kbd>
  move by individual characters/lines
- <kbd>Ctrl</kbd>-<kbd>→</kbd>, etc. move by words/paragraphs
- <kbd>Home</kbd>, <kbd>End</kbd> move to the ends of the buffer
- <kbd>PgUp</kbd>, <kbd>PgDn</kbd> move vertically by pages
- <kbd>Ctrl</kbd>-<kbd>PgUp</kbd>, <kbd>Ctrl</kbd>-<kbd>PgDn</kbd>
  move horizontally by pagesthe granularity of the move, as a `GtkMovementStep`the number of @step units to move%TRUE if the move should extend the selectionGets emitted to move the viewport.

The ::move-viewport signal is a [keybinding signal](class.SignalAction.html),
which can be bound to key combinations to allow the user to move the viewport,
i.e. change what part of the text view is visible in a containing scrolled
window.

There are no default bindings for this signal.the granularity of the movement, as a `GtkScrollStep`the number of @step units to moveGets emitted to paste the contents of the clipboard
into the text view.

The ::paste-clipboard signal is a [keybinding signal](class.SignalAction.html).

The default bindings for this signal are
<kbd>Ctrl</kbd>-<kbd>v</kbd> and
<kbd>Shift</kbd>-<kbd>Insert</kbd>.Emitted when preedit text of the active IM changes.

If an input method is used, the typed text will not immediately
be committed to the buffer. So if you are interested in the text,
connect to this signal.

This signal is only emitted if the text at the given position
is actually editable.the current preedit stringGets emitted to select or unselect the complete contents of the text view.

The ::select-all signal is a [keybinding signal](class.SignalAction.html).

The default bindings for this signal are
<kbd>Ctrl</kbd>-<kbd>a</kbd> and
<kbd>Ctrl</kbd>-<kbd>/</kbd> for selecting and
<kbd>Shift</kbd>-<kbd>Ctrl</kbd>-<kbd>a</kbd> and
<kbd>Ctrl</kbd>-<kbd>\</kbd> for unselecting.%TRUE to select, %FALSE to unselectGets emitted when the user initiates settings the "anchor" mark.

The ::set-anchor signal is a [keybinding signal](class.SignalAction.html)
which gets emitted when the user initiates setting the "anchor"
mark. The "anchor" mark gets placed at the same position as the
"insert" mark.

This signal has no default bindings.Gets emitted to toggle the `cursor-visible` property.

The ::toggle-cursor-visible signal is a
[keybinding signal](class.SignalAction.html).

The default binding for this signal is <kbd>F7</kbd>.Gets emitted to toggle the overwrite mode of the text view.

The ::toggle-overwrite signal is a [keybinding signal](class.SignalAction.html).

The default binding for this signal is <kbd>Insert</kbd>.
"""
  fun gnew(): NullablePointer[SGtkWidget] =>
"""
Creates a new `GtkTextView`.

If you don’t call [method@Gtk.TextView.set_buffer] before using the
text view, an empty default buffer will be created for you. Get the
buffer with [method@Gtk.TextView.get_buffer]. If you want to specify
your own buffer, consider [ctor@Gtk.TextView.new_with_buffer].a new `GtkTextView`
"""

    @printf("gtk_text_view_new()\n".cstring())
    @gtk_text_view_new()
  fun new_with_buffer(buffer: NullablePointer[SGtkTextBuffer] tag): NullablePointer[SGtkWidget] =>
"""
Creates a new `GtkTextView` widget displaying the buffer @buffer.

One buffer can be shared among many widgets. @buffer may be %NULL
to create a default buffer, in which case this function is equivalent
to [ctor@Gtk.TextView.new]. The text view adds its own reference count
to the buffer; it does not take over an existing reference.a new `GtkTextView`.a `GtkTextBuffer`
"""

    @printf("gtk_text_view_new_with_buffer(buffer: NullablePointer[SGtkTextBuffer] tag)\n".cstring())
    @gtk_text_view_new_with_buffer(buffer)
  fun set_buffer(textview: NullablePointer[SGtkTextView] tag, buffer: NullablePointer[SGtkTextBuffer] tag): None =>
"""
Sets @buffer as the buffer being displayed by @text_view.

The previous buffer displayed by the text view is unreferenced, and
a reference is added to @buffer. If you owned a reference to @buffer
before passing it to this function, you must remove that reference
yourself; `GtkTextView` will not “adopt” it.a `GtkTextView`a `GtkTextBuffer`
"""

    @printf("gtk_text_view_set_buffer(textview: NullablePointer[SGtkTextView] tag, buffer: NullablePointer[SGtkTextBuffer] tag)\n".cstring())
    @gtk_text_view_set_buffer(textview, buffer)
  fun get_buffer(textview: NullablePointer[SGtkTextView] tag): NullablePointer[SGtkTextBuffer] =>
"""
Returns the `GtkTextBuffer` being displayed by this text view.

The reference count on the buffer is not incremented; the caller
of this function won’t own a new reference.a `GtkTextBuffer`a `GtkTextView`
"""

    @printf("gtk_text_view_get_buffer(textview: NullablePointer[SGtkTextView] tag)\n".cstring())
    @gtk_text_view_get_buffer(textview)
  fun set_wrap_mode(textview: NullablePointer[SGtkTextView] tag, wrapmode: I32): None =>
"""
Sets the line wrapping for the view.a `GtkTextView`a `GtkWrapMode`
"""

    @printf("gtk_text_view_set_wrap_mode(textview: NullablePointer[SGtkTextView] tag, wrapmode: I32)\n".cstring())
    @gtk_text_view_set_wrap_mode(textview, wrapmode)
  fun get_wrap_mode(textview: NullablePointer[SGtkTextView] tag): I32 =>
"""
Gets the line wrapping for the view.the line wrap settinga `GtkTextView`
"""

    @printf("gtk_text_view_get_wrap_mode(textview: NullablePointer[SGtkTextView] tag)\n".cstring())
    @gtk_text_view_get_wrap_mode(textview)
  fun set_editable(textview: NullablePointer[SGtkTextView] tag, setting: I32): None =>
"""
Sets the default editability of the `GtkTextView`.

You can override this default setting with tags in the buffer,
using the “editable” attribute of tags.a `GtkTextView`whether it’s editable
"""

    @printf("gtk_text_view_set_editable(textview: NullablePointer[SGtkTextView] tag, setting: I32)\n".cstring())
    @gtk_text_view_set_editable(textview, setting)
  fun get_editable(textview: NullablePointer[SGtkTextView] tag): I32 =>
"""
Returns the default editability of the `GtkTextView`.

Tags in the buffer may override this setting for some ranges of text.whether text is editable by defaulta `GtkTextView`
"""

    @printf("gtk_text_view_get_editable(textview: NullablePointer[SGtkTextView] tag)\n".cstring())
    @gtk_text_view_get_editable(textview)
  fun set_monospace(textview: NullablePointer[SGtkTextView] tag, monospace: I32): None =>
"""
Sets whether the `GtkTextView` should display text in
monospace styling.a `GtkTextView`%TRUE to request monospace styling
"""

    @printf("gtk_text_view_set_monospace(textview: NullablePointer[SGtkTextView] tag, monospace: I32)\n".cstring())
    @gtk_text_view_set_monospace(textview, monospace)
  fun get_monospace(textview: NullablePointer[SGtkTextView] tag): I32 =>
"""
Gets whether the `GtkTextView` uses monospace styling.%TRUE if monospace fonts are desireda `GtkTextView`
"""

    @printf("gtk_text_view_get_monospace(textview: NullablePointer[SGtkTextView] tag)\n".cstring())
    @gtk_text_view_get_monospace(textview)
